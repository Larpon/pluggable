// Copyright(C) 2023 Lars Pontoppidan. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.
module main

import moo

fn new_plugin_foo(s &State) &Foo {
	return &Foo{
		state: s
	}
}

struct Foo {
mut:
	state &State
}

fn (mut f Foo) init() ! {
	println('${@STRUCT}.${@FN} called')
}

/*
fn (mut f Foo) shutdown() ! {
	println('${@STRUCT}.${@FN} called')
}
*/

fn (mut f Foo) modify_moo_state(mut ms moo.State) ! {
	ms.moo = 'foo'
	eprintln('${@STRUCT}.${@FN} called')
}

fn (mut f Foo) do_x() ! {
	println('${@STRUCT}.${@FN} called')
	f.state.goo += 'foo'
}
